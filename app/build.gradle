apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

apply from: '../autodimension.gradle'

/**
 * start config and check ci*/
apply from: '../checkci.gradle'

def APP_ID = "com.fstyle.structure_android"

android {
  compileSdkVersion rootProject.ext.compileSdkVersion
  buildToolsVersion rootProject.ext.buildToolsVersion

  defaultConfig {
    applicationId "${APP_ID}"
    minSdkVersion rootProject.ext.minSdkVersion
    targetSdkVersion rootProject.ext.targetSdkVersion
    versionCode rootProject.ext.versionCode
    versionName rootProject.ext.versionName

    vectorDrawables.useSupportLibrary = true

    testApplicationId "${APP_ID + ".cucumber.steps"}"
    testInstrumentationRunner "${APP_ID + ".cucumber.runner.CucumberTestRunner"}"
  }

  dataBinding {
    enabled = true
  }

  lintOptions {
    abortOnError false
  }

  testOptions {
    unitTests.returnDefaultValues = true
  }

  sourceSets {
    androidTest {
      assets.srcDirs = ['src/androidTest/assets']
    }
  }

  signingConfigs {
    debug {}

    release {

      if (!System.getenv('CI')) {
        def signFile = file("../local.properties")
        def signingProps = new Properties()

        signingProps.load(new FileInputStream(signFile))

        storeFile file("../keystores/keystore_release.keystore")
        storePassword signingProps['storePassword']
        keyAlias signingProps['keyAlias']
        keyPassword signingProps['keyPassword']
      }
    }
  }

  buildTypes {
    debug {
      //      versionNameSuffix = "debug"
      debuggable true
      buildConfigField "String", "TEST_TAGS", "\"${getTestTags()}\""
    }
    mock {
      versionNameSuffix = "mock"
      applicationIdSuffix = ".mock"
      signingConfig signingConfigs.debug
    }
    staging {
      versionNameSuffix = "stg"
      applicationIdSuffix = ".stg"
      signingConfig signingConfigs.debug
    }
    release {
      shrinkResources true
      minifyEnabled true
      signingConfig signingConfigs.release
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }
}

repositories {
  mavenCentral()
}

// Read Cucumber tags from command line like: ./gradlew connectedAndroidTest -Dtags="@login-scenarios,@kitkat"
def getTestTags() {
  return project.hasProperty("tags") ? project.getProperties().get("tags") : ""
}

dependencies {
  compile fileTree(dir: 'libs', include: ['*.jar'])

  Map<String, String> dependencies = rootProject.ext.dependencies

  kapt dependencies.dataBinding

  compile dependencies.constraintLayout
  compile dependencies.dialog
  compile dependencies.recyclerView

  compile dependencies.rxJava
  compile dependencies.rxAndroid

  compile dependencies.retrofit2
  compile dependencies.retrofit2Adapter
  compile dependencies.retrofitGson
  compile dependencies.loggingInterceptor

  compile dependencies.glide

  kapt dependencies.dagger2Compile
  compile dependencies.dagger2
  provided dependencies.annotation

  testCompile dependencies.junit
  testCompile dependencies.mockito

  androidTestCompile 'info.cukes:cucumber-android:1.2.5'
  androidTestCompile 'info.cukes:cucumber-picocontainer:1.2.5'
  androidTestCompile 'info.cukes:cucumber-jvm-deps:1.0.5'
  // Screenshots
  androidTestCompile 'com.squareup.spoon:spoon-client:1.7.1'
  androidTestCompile('com.android.support.test.espresso:espresso-contrib:2.2.2') {
    exclude group: 'com.android.support', module: 'support-annotations'
    exclude group: 'com.android.support', module: 'appcompat-v7'
    exclude group: 'com.android.support', module: 'support-v4'
    exclude module: 'recyclerview-v7'
  }
  compile "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
}
